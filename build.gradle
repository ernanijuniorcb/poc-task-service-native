plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.1'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'org.graalvm.buildtools.native' version '0.9.19'
	id 'net.researchgate.release' version '3.0.2'
	id 'distribution'
}

sourceCompatibility = 19
targetCompatibility = 19

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	maven { url 'https://repo.spring.io/release' }
	mavenCentral()
	gradlePluginPortal()
}

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-web') {
		exclude group: 'org.apache.tomcat.embed', module: 'tomcat-embed-core'
		exclude group: 'org.apache.tomcat.embed', module: 'tomcat-embed-websocket'
	}
	implementation "org.apache.tomcat.experimental:tomcat-embed-programmatic:${dependencyManagement.importedProperties["tomcat.version"]}"
	implementation 'org.springframework.cloud:spring-cloud-function-dependencies:4.0.1'
	implementation 'org.springframework.cloud:spring-cloud-function-context:4.0.1'
	implementation 'org.springframework.cloud:spring-cloud-function-adapter-aws:4.0.1'

	implementation 'software.amazon.awssdk:dynamodb-enhanced:2.19.19'
	implementation 'software.amazon.awssdk:annotations:2.19.19'
	implementation 'com.amazonaws:aws-lambda-java-events:3.11.0'
	implementation 'com.amazonaws:aws-lambda-java-serialization:1.0.2'
	implementation 'com.amazonaws:aws-lambda-java-core:1.2.1'
	implementation 'com.amazonaws:aws-lambda-java-log4j2:1.5.1'
	implementation 'com.amazonaws.serverless:aws-serverless-java-container-spring:1.8.2'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

graalvmNative {
	sourceCompatibility = 17
	targetCompatibility = 17
	testSupport = false
	binaries {
		main {
			javaLauncher = javaToolchains.launcherFor {
				languageVersion = JavaLanguageVersion.of(19)
				vendor = JvmVendorSpec.matching("GraalVM Community")
			}
		}
	}
	toolchainDetection = false
}

distributions {
	main {
		contents {
//			into('lib/') {  // Copy the following jars to the lib/ directory in the distribution archive
//				from jar
//				from configurations.runtimeClasspath
//				dirMode = 0755
//				fileMode = 0775
//			}
			into('/') {  // Contents of this directory are copied by default
				from 'src/shell/native'
				from 'build/native/nativeCompile'
				dirMode = 0755
				fileMode = 0775
			}
		}
	}
}

task buildNativeImageDist {
	dependsOn 'clean'
	dependsOn 'nativeCompile'
	dependsOn 'distZip'
	tasks.findByName('nativeCompile').mustRunAfter 'clean'
	tasks.findByName('distZip').mustRunAfter 'nativeCompile'
}

