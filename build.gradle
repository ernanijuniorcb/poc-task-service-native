import java.util.regex.Matcher

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.5'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'org.graalvm.buildtools.native' version '0.9.19'
	id 'net.researchgate.release' version '3.0.2'
	id 'distribution'
}


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	maven { url 'https://repo.spring.io/release' }
	mavenCentral()
	gradlePluginPortal()
}

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-web') {
		exclude group: 'org.apache.tomcat.embed', module: 'tomcat-embed-core'
		exclude group: 'org.apache.tomcat.embed', module: 'tomcat-embed-websocket'
	}
	implementation "org.apache.tomcat.experimental:tomcat-embed-programmatic:${dependencyManagement.importedProperties["tomcat.version"]}"
	implementation 'org.springframework.cloud:spring-cloud-function-dependencies:4.0.1'
	implementation 'org.springframework.cloud:spring-cloud-function-context:4.0.1'
	implementation 'org.springframework.cloud:spring-cloud-function-adapter-aws:4.0.1'

	implementation 'software.amazon.awssdk:dynamodb-enhanced:2.19.19'
	implementation 'software.amazon.awssdk:annotations:2.19.19'
	implementation 'com.amazonaws:aws-lambda-java-events:3.11.0'
	implementation 'com.amazonaws:aws-lambda-java-serialization:1.0.2'
	implementation 'com.amazonaws:aws-lambda-java-core:1.2.1'
	implementation 'com.amazonaws:aws-lambda-java-log4j2:1.5.1'

	implementation 'org.mapstruct:mapstruct:1.5.4.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.4.Final'
	testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.5.4.Final'

	implementation 'org.springframework.boot:spring-boot-starter-validation:3.0.5'

	compileOnly 'org.projectlombok:lombok:1.18.26'
	annotationProcessor 'org.projectlombok:lombok:1.18.26'
	annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

	testCompileOnly 'org.projectlombok:lombok:1.18.26'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.26'
	testAnnotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
	testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
	testImplementation 'javax.servlet:javax.servlet-api:4.0.1'
	testImplementation 'org.testcontainers:testcontainers:1.18.0'
	testImplementation "org.testcontainers:junit-jupiter:1.18.0"

}

tasks.named('test') {
	useJUnitPlatform()
	environment "AWS_ACCESS_KEY_ID", "fake"
	environment "AWS_SECRET_ACCESS_KEY", "fake"
	environment "AWS_REGION", 'local'
}

tasks.named("jar") {
	from collectReachabilityMetadata
}

graalvmNative {
	testSupport = false
	metadataRepository {
		enabled = true
	}
	sourceCompatibility = 19
	targetCompatibility = 19
	testSupport = false
	binaries.all {
		resources.autodetect()
	}
	binaries {
		main {
			resources.autodetect()
			javaLauncher = javaToolchains.launcherFor {
				languageVersion = JavaLanguageVersion.of(19)
				vendor = JvmVendorSpec.matching("GraalVM Community")

			}
			// buildArgs.add('-H:IncludeResources=org/joda/time/tz/data/.*')
		}
	}
	toolchainDetection = false
}

distributions {
	main {
		distributionBaseName = 'function-lambda'
		contents {
			into('/') {  // Contents of this directory are copied by default
				from 'src/shell/native'
				from 'build/native/nativeCompile'
				dirMode = 0755
				fileMode = 0775
			}
		}
	}
}

distZip {
	archiveVersion = archiveVersion.get() replace("-SNAPSHOT", '')
}

tasks.register('buildNativeImageDist') {
	afterReleaseBuild.dependsOn distZip
	dependsOn 'clean'
	dependsOn 'nativeCompile'
	dependsOn 'release'
	dependsOn 'distZip'
	tasks.findByName('nativeCompile').mustRunAfter 'clean'
	tasks.findByName('release').mustRunAfter 'nativeCompile'
	tasks.findByName('distZip').mustRunAfter 'nativeCompile'
}

release {
	String release_version = providers.gradleProperty("release_version").getOrElse("0.0.0")
	String next_version = providers.gradleProperty("next_version").getOrElse("0.0.0")
	versionPatterns = [
			/(\d+)([^\d]*$)/   : { Matcher m, Project p -> m.replaceAll("${(m[0][1] as int) + 1}${m[0][2]}") },
			/^LATEST_SNAPSHOT*/: { "LATEST_SNAPSHOT" }
	]
	preCommitText = '[skip ci]'
	preTagCommitMessage = "bump: ${{ release_version }} -> "
	tagCommitMessage = "bump: ${{ next_version }} -> "
}